#ifndef _UTIL_H_
#define _UTIL_H_

void generate_sequence(int xs, int currentlen, int seqlen, int *seq);
/*
* Function:generate_sequence
*
* To do: Takes xs (the  first  element of  the  sequence), seqlen (the  length  of  the  sequence),
*        currentlen (the length of the sequence in the time of the function called), *seq (the array of the sequence) as parameters.
*        Creates a loop according to Collatz conjucture.
*
* return: nothing
*/

void check_loop_iterative(void (*f)(int,int,int,int*), int xs, int seqlen, int *loop,int *looplen);
/*
* Function: check_loop_iterative
*
* To do: Generates & prints the sequence (print it only once). Also, checks if the sequence has a loop. If there is a loop, 
*        prints its size and the indexes of its first occurrence. 
*
* return: nothing
*/

int has_loop(int *arr, int n, int looplen, int *ls, int *le);
/*
* Function: has_loop
*
* To do: The function receives a sequence starting from arr[0]and ending at arr[n-1]. It checks if there are any loops with a length of looplen.
*        The first occurrence of the loop is output with parameters ls and le. 
*
* returns: 1 if a loop exists, 0 otherwise. 
*/


void hist_of_firstdigits(void (*f)(int,int,int,int*), int xs, int seqlen, int *h, int digit);
/*
* Function: hist_of_firstdigits
*
* To do: Calculates the histogram of the first digits of the sequence generated by a given function.
*
* returns: nothing
*/
int digitfinder(int a);
/*
* Function: digitfinder
*
* To do: It calculates the number of digits of the integer a which it takes as a parameter and assigns this value to counter1.
*
* returns: counter1
*/


#endif /* _UTIL_H_ */
